#!/usr/bin/python
import sys
import time
# FIXME: this shall be removed in the final version
sys.path = ["/home/jkt/work/fzu/deska/src/deska/python", "/home/jkt/work/fzu/deska/_build"] + sys.path
import deska

deska.init()

t1 = time.time()
boxes = deska.box._all()
hardware = deska.hardware._all()
switches = deska.switch._all()
modelbox = deska.modelbox._all()
modelhardware = deska.modelhardware._all()
modelswitch = deska.modelswitch._all()
t2 = time.time()

queue = ["serverovna"]
keys = boxes.keys()
keys.remove("serverovna")
res = {}
res[None] = [k for k in keys if boxes[k].inside is None]

while len(queue):
    current = queue.pop(0)
    children = [x for x in keys if boxes[x].inside == current]
    queue.extend(children)
    res[current] = children

def position_sorter(item):
    if boxes[item].x is not None:
        x = boxes[item].x
    else:
        x = 1
    if boxes[item].y is not None:
        y = boxes[item].y
    else:
        y = 1
    if boxes[item].z is not None:
        z = boxes[item].z
    else:
        z = 1
    return (-y, x, z, item)

def to_qml_identifier(x):
    return "box_%s" % x.replace("-", "_")

def print_current(s, indent, key, special_nodes, parent_name, parent_box_data, previous_name):
    short_prefix = " " * indent
    prefix = " " * (indent + 2)
    my_modelbox = None
    my_box = boxes[key]
    if my_box.direct_modelbox is not None:
        my_modelbox = dict((k,v) for (k,v) in modelbox.iteritems() if k == my_box.direct_modelbox)
        my_modelbox_data = my_modelbox.values()[0]
    elif my_box.hardware is not None:
        my_modelhw = dict((k,v) for (k,v) in modelhardware.iteritems() if k == hardware[key].modelhardware)
        my_modelhw_obj = my_modelhw[my_modelhw.keys()[0]]
        my_modelbox = dict((k,v) for (k,v) in modelbox.iteritems() if k == my_modelhw_obj.modelbox)
        if not len(my_modelbox):
            my_modelbox = None
        else:
            my_modelbox_data = my_modelbox.values()[0]
    elif my_box.switch is not None:
        my_modelsw = dict((k,v) for (k,v) in modelswitch.iteritems() if k == switches[key].modelswitch)
        my_modelsw_obj = my_modelsw[my_modelsw.keys()[0]]
        my_modelbox = dict((k,v) for (k,v) in modelbox.iteritems() if k == my_modelsw_obj.modelbox)
        if not len(my_modelbox):
            my_modelbox = None
        else:
            my_modelbox_data = my_modelbox.values()[0]
    else:
        my_modelbox_data = None

    all_children = sorted(res[key], key=position_sorter)

    if key in special_nodes:
        s.write(special_nodes[key])
        previous_name = None
        for x in all_children:
            print_current(s, indent + 2, x, special_nodes, parent_name=key, parent_box_data=my_modelbox_data,
                          previous_name=previous_name)
            previous_name = to_qml_identifier(x)
        s.write("}\n")
        return

    buf = []
    buf.append(short_prefix + "DeskaDividedBox {")
    buf.append(prefix + 'id: %s' % to_qml_identifier(key))
    if len(all_children):
        buf.append(prefix + '// %s' % key)
    else:
        buf.append(prefix + 'name: "%s"' % key)

    if my_modelbox is not None:
        #buf.append("// %s %s %s" % (my_modelbox.keys()[0], repr(my_modelbox_data), repr(my_box)))
        if my_modelbox_data.internal_height is not None:
            buf.append(prefix + 'innerHeight: %s' % my_modelbox_data.internal_height)
        if my_modelbox_data.internal_width is not None:
            buf.append(prefix + 'innerWidth: %s' % my_modelbox_data.internal_width)
        if my_box.x is not None:
            # See the comment below. At least the numebring starts on the left.
            buf.append(prefix + 'rackX: %d' % (int(my_box.x) - 1))
        if my_box.y is not None:
            # There's a bunch of issues with our positioning. The QML coordinate system has (0,0) at the top left
            # corner, while the farmdb idnexing starts with one and at the bottom. Furthermore, the farmdb always
            # specifies the top left corner of the box as the reference point when specifying the position.
            if parent_box_data is not None and parent_box_data.internal_height is not None:
                buf.append(prefix + 'rackY: %d' % (parent_box_data.internal_height - my_box.y))
            else:
                buf.append(prefix + 'rackY: %d' % (int(my_box.y) - 1))
        if my_modelbox_data.width is not None:
            buf.append(prefix + 'consumesBaysX: %s' % my_modelbox_data.width)
        if my_modelbox_data.height is not None:
            buf.append(prefix + 'consumesBaysY: %s' % my_modelbox_data.height)
    else:
        buf.append(prefix + "// no modelbox\n")

    buf.append("")
    s.write("\n".join(buf))
    previous_name = None
    for x in all_children:
        print_current(s, indent + 2, x, special_nodes, key, parent_box_data=my_modelbox_data,
                      previous_name=previous_name)
        previous_name = to_qml_identifier(x)
    s.write(short_prefix + "}\n")

special_node_rules = {
    "serverovna": """
Rectangle {
id: serverovna
//color: "transparent"
width: 1200
height: 1300
""",
}


def process_racks(f, iterable):
    previous_name = None
    for rack in iterable:
        if previous_name is None:
            anchor_left = "parent.left"
        else:
            anchor_left = "%s.right" % to_qml_identifier(previous_name)
        previous_name = rack
        formatting = {"rack": rack, "anchor_left": anchor_left, "row_size": len(iterable), "id": to_qml_identifier(rack)}
        f.write(" Loader {\n  id: %(id)s\n  source: \"rack_%(rack)s.qml\"\n  anchors.left: %(anchor_left)s\n  width: parent.width / %(row_size)d\n  height: Math.max(parent.height - 40, 20)\n }\n\n" % formatting)



top_racks = sorted([k for (k,v) in boxes.iteritems() if v.inside == "serverovna"])
for rack in top_racks:
    f_rack = file("rack_%s.qml" % rack, "wb")
    f_rack.write("import QtQuick 1.0\n\n")
    print_current(f_rack, 0, rack, {}, parent_name=None, parent_box_data=None, previous_name=None)
    f_rack.close()

f = file("boxes.qml", "wb")
f.write("import QtQuick 1.0\n\n")
f.write(special_node_rules["serverovna"])

f.write("Rectangle {\nid: left_aisle\nanchors.top: parent.top\nanchors.left: parent.left\nanchors.right: parent.right\nheight: parent.height / 2\n")
process_racks(f, [x for x in top_racks if x.startswith("L")])
f.write("}\nRectangle {\nid: right_aisle\nanchors.top: left_aisle.bottom\nanchors.left: parent.left\nanchors.right: parent.right\nanchors.bottom: parent.bottom\n")
process_racks(f, [x for x in top_racks if x.startswith("R")])
f.write("}\n")
f.write("}\n")

t3 = time.time()

#file("__timing-stats", "ab").write(
#    "boxes: total %s, main query %s, loop %s\n" % (t3 - t1, t2 - t1, t3 - t2))
