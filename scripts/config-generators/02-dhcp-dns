#!/usr/bin/python
import sys
import time
import cStringIO as StringIO
import datetime
import os
# FIXME: this shall be removed in the final version
sys.path = ["/home/jkt/work/fzu/deska/src/deska/python", "/home/jkt/work/fzu/deska/_build"] + sys.path
import deska

deska.init()

def ipv4_sorter(x):
    (k, v) = x
    return int(str(v.ip4).split(".")[-1])

def switchport_sorter(x):
    (k, v) = x
    return "%s-%5s" % (v.switch, v.port)

def write_file(iterable, domain, fp_dhcp=None, fp_zone=None, fp_rzone=None):
    for (k, v) in iterable:
        if v.mac is None:
            continue
        (hostname, ifacename) = k.split("->")
        # check any other interfaces here
        # We do not go to the DB here; doing that locally is faster
        others = [(k1, v1) for (k1, v1) in iterable if
                  k1.startswith("%s->" % hostname) and k1 != ifacename]
        additional = []
        for (other_k, other_v) in others:
            if other_k == k:
                continue
            if v.note is not None:
                note = v.note + " "
            else:
                note = ""
            additional.append("\n        # %s: %s%s" % (other_k.split("->")[-1],
                                                        note, other_v.mac))

        args = {"ipv4": v.ip4, "mac": v.mac, "host": hostname, "additional": "".join(additional)}
        if fp_dhcp is not None:
            fp_dhcp.write("""    host %(host)s {%(additional)s
        hardware ethernet %(mac)s;
        fixed-address %(ipv4)s;
    }\n\n""" % args)
        if fp_zone is not None:
            fp_zone.write("%s\t\t\tA\t%s\n" % (hostname, v.ip4))
        if fp_rzone is not None:
            fp_rzone.write("%s\t\tIN\tPTR\t%s.%s.\n" %
                           (str(v.ip4).split(".")[3], hostname, domain))


class MagicZoneFile(object):
    """Handle updating a magic number in case the file contents has changed"""

    def __init__(self, targetFile):
        self.buf = StringIO.StringIO()
        self.targetFile = targetFile
        self.serialPosition = None

    def write(self, data):
        self.buf.write(data)

    def writeSerialHere(self):
        if self.serialPosition is not None:
            raise RuntimeError, "MagicZoneFile.writeSerialHere: serial position already marked. This shall happen only once."
        self.serialPosition = self.buf.tell()

    def close(self):
        if self.serialPosition is None:
            raise RuntimeError, "MagicZoneFile: position of the serial marker was not specified."
        if not os.path.exists(self.targetFile):
            self.forceWriteData(None)
            return
        sourceData = file(self.targetFile, "rb")
        self.buf.seek(0)
        oldHeader = sourceData.read(self.serialPosition)
        newHeader = self.buf.read(self.serialPosition)
        if oldHeader != newHeader:
            sourceData.close()
            print "MagicZoneFile(%s): headers are different" % self.targetFile
            self.forceWriteData(None)
            return
        serialText = datetime.date.today().strftime("%Y%m%d")
        # because the two characters are for the incrementing part
        suffixLen = 2
        length = len(serialText) + suffixLen
        oldSerial = sourceData.read(length)
        if len(oldSerial) != length:
            sourceData.close()
            print "MagicZoneFile(%s): old serial '%s' is corrupted" % (self.targetFile, oldSerial)
            # Now there's a question what to do. We don't know what the old serial value was, so let's just assume zero...
            self.forceWriteData(None)
            return
        oldNum = int(oldSerial[-suffixLen:])
        if oldNum == 99 and serialText == oldSerial[:-suffixLen]:
            sourceData.close()
            raise RuntimeError, "MagicZoneFile(%s): serial wrap around for today, sorry" % self.targetFile
        newSerial = "%s%02d" % (serialText, oldNum + 1)
        oldData = sourceData.read()
        newData = self.buf.read()
        sourceData.close()
        if oldData == newData:
            print "MagicZoneFile(%s): data are the same" % self.targetFile
        elif oldSerial[:-suffixLen] == serialText:
            # increase the counter
            self.forceWriteData(newSerial)
        else:
            # start at zero again
            self.forceWriteData(None)


    def forceWriteData(self, newSerial):
        if newSerial is None:
            newSerial = datetime.date.today().strftime("%Y%m%d") + "00"
        assert(self.serialPosition is not None)
        self.buf.seek(0)
        target = file(self.targetFile, "wb")
        target.write(self.buf.read(self.serialPosition))
        target.write(newSerial)
        target.write(self.buf.read())
        target.close()

# There are a few gotchas here. First of all, the tests for NULLs got to be
# performed through the "== None" or "!= None" operations instead of Pythonic
# "is (not) None". Another point is that one cannot use the "and" oeprator, but
# has to rely on the "&", as "and" cannot be overriden in Python. Please see
# comments in src/deska/python/deska/classes.py (or the Deska documentation) for
# details.
t1 = time.time()
networks = deska.network._all()
interfaces_vlan25 = sorted(deska.interface[(deska.interface.ip4 != None) &
                                           (deska.network.vlan == 25)]
                           .iteritems(), key=ipv4_sorter)
interfaces_vlan172= sorted(deska.interface[(deska.interface.ip4 != None) &
                                           (deska.network.vlan == 172)]
                           .iteritems(), key=ipv4_sorter)
interfaces_vlan8  = sorted(deska.interface[(deska.interface.ip4 != None) &
                                           (deska.network.vlan == 8)]
                           .iteritems(), key=ipv4_sorter)

interfaces_all = sorted(interfaces_vlan25 + interfaces_vlan172 + interfaces_vlan8, key=switchport_sorter)
t2 = time.time()

f_dhcp = file("dhcpd-farm", "wb")
f_dhcp.write("""subnet 147.231.25.0 netmask 255.255.255.0  {

    option routers                  147.231.25.253;
    option domain-name "farm.particle.cz";
    option domain-name-servers      147.231.25.14, 147.231.25.16, 147.231.27.173;
    option interface-mtu 1500;

    # one week
    default-lease-time      604800;
    min-lease-time          604800;
}

# sorted by IP address

group {
    filename "pxelinux.0";
    next-server 147.231.25.14;

    # 147.231.25.1, 147.231.25.2, 147.231.25.3, 147.231.25.4 jsou vyhrazeny pro NATovana spojeni

""")
f_zone = MagicZoneFile("bind-farm.particle.cz.common.zone")
f_zone.write("""
;b this is a header
$ORIGIN particle.cz.
farm            IN      SOA   netservice1.farm.particle.cz.   svecj.fzu.cz. (
                                      """)
f_zone.writeSerialHere()
f_zone.write("""
                                      21600
                                      3600
                                      3600000
                                      3h
                                      )
                IN      NS    sun173c.fzu.cz.
                IN      NS    sie154b.fzu.cz.
                IN      NS    netservice1.farm.particle.cz.
                IN      NS    netservice2.farm.particle.cz.
""")
f_rzone = MagicZoneFile("bind-farm.particle.cz.common.rzone")
f_rzone.write("""
;b this is a header
$ORIGIN particle.cz.
farm            IN      SOA   netservice1.farm.particle.cz.   svecj.fzu.cz. (
                                      """)
f_rzone.writeSerialHere()
f_rzone.write("""
                                      21600
                                      3600
                                      3600000
                                      3h
                                      )
                IN      NS    sun173c.fzu.cz.
                IN      NS    sie154b.fzu.cz.
                IN      NS    netservice1.farm.particle.cz.
                IN      NS    netservice2.farm.particle.cz.
""")
write_file(interfaces_vlan25, "farm.particle.cz", fp_dhcp=f_dhcp,
           fp_zone=f_zone, fp_rzone=f_rzone)
f_dhcp.write("\n}\n")
f_dhcp.close()
f_zone.close()
f_rzone.close()

# The list of interfaces in the VLAN172 is all what we need, but as it happens,
# the FZU uses a different convention for this one -- even though all of the
# machines are in the same VLAN, we shall produce a list of files splitted by a
# /24 allocation. We're going to do that client-side.
unique_subnets_172 = set([".".join(str(x[1].ip4).split(".")[0:3]) for x in interfaces_vlan172])
# The DNS zones are shared
f_zone = MagicZoneFile("bind-farm.particle.cz.private.zone")
f_zone.write("""
;b this is a header
$ORIGIN particle.cz.
farm            IN      SOA   netservice1.farm.particle.cz.   svecj.fzu.cz. (
                                      """)
f_zone.writeSerialHere()
f_zone.write("""
                                      21600
                                      3600
                                      3600000
                                      3h
                                      )
                IN      NS    sun173c.fzu.cz.
                IN      NS    sie154b.fzu.cz.
                IN      NS    netservice1.farm.particle.cz.
                IN      NS    netservice2.farm.particle.cz.
""")
f_rzone = MagicZoneFile("bind-farm.particle.cz.private.rzone")
f_rzone.write("""
;b this is a header
$ORIGIN particle.cz.
farm            IN      SOA   netservice1.farm.particle.cz.   svecj.fzu.cz. (
                                      """)
f_rzone.writeSerialHere()
f_rzone.write("""
                                      21600
                                      3600
                                      3600000
                                      3h
                                      )
                IN      NS    sun173c.fzu.cz.
                IN      NS    sie154b.fzu.cz.
                IN      NS    netservice1.farm.particle.cz.
                IN      NS    netservice2.farm.particle.cz.
""")

for subnet in unique_subnets_172:
    f_dhcp = file("dhcpd-%s" % subnet, "wb")
    f_dhcp.write("group {\n")
    write_file([x for x in interfaces_vlan172 if str(x[1].ip4).startswith(subnet)],
               "farm.particle.cz", fp_dhcp=f_dhcp, fp_zone=f_zone,
               fp_rzone=f_rzone)
    f_dhcp.write("\n}\n")
    f_dhcp.close()
f_zone.close()
f_rzone.close()

f_dhcp = file("dhcpd-monitor", "wb")
f_dhcp.write("""######################
# Monitoring network #
######################



subnet 192.168.0.0 netmask 255.255.0.0 {

    option routers              192.168.0.234;
    option domain-name          "monitor";
    option domain-name-servers  192.168.1.14, 192.168.1.16;
    option interface-mtu 1500;

    # one week
    default-lease-time      604800;
    min-lease-time          604800;

""")
f_zone = open("bind-monitor.zone", "wb")
f_rzone = open("bind-monitor.rzone", "wb")
write_file(interfaces_vlan8, "monitor", fp_dhcp=f_dhcp, fp_zone=f_zone,
           fp_rzone=f_rzone)
f_dhcp.write("\n}\n")
f_dhcp.close()
f_zone.close()
f_rzone.close()

switches = sorted(set(v.switch for (k,v) in interfaces_all))
for switch in switches:
    f_switch = open("switch-%s" % switch, "wb")
    for (iface, iface_data) in interfaces_all:
        if iface_data.switch != switch:
            continue
        if iface_data.port is None:
            continue
        (hostname, iface_local) = iface.split("->")
        mynet = networks[iface_data.network]
        if mynet.vlan == 8 and not hostname.endswith(".monitor"):
            hostname = hostname + ".monitor"
        s = "interface %s\n" % iface_data.port
        s += "  description %s\n" % hostname
        s += "  switchport\n  switchport mode access\n  switchport access vlan %s\n" % mynet.vlan
        s += "end\n\n"
        f_switch.write(s)
    f_switch.close()


t3 = time.time()

#file("__timing-stats", "wb").write(
#    "DHCP VLAN 25: total %s, main query %s, loop %s\n" % (t3 - t1, t2 - t1, t3 - t2))
