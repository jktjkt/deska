#!/usr/bin/python
import sys
import time
# FIXME: this shall be removed in the final version
sys.path = ["/home/jkt/work/fzu/deska/src/deska/python", "/home/jkt/work/fzu/deska/_build"] + sys.path
import deska

deska.init()

t1 = time.time()
boxes = deska.box._all()
hardware = deska.hardware._all()
modelbox = deska.modelbox._all()
modelhardware = deska.modelhardware._all()
t2 = time.time()

queue = ["serverovna"]
keys = boxes.keys()
keys.remove("serverovna")
res = {}
res[None] = [k for k in keys if boxes[k].inside is None]

while len(queue):
    current = queue.pop(0)
    children = [x for x in keys if boxes[x].inside == current]
    queue.extend(children)
    res[current] = children

def position_sorter(item):
    if boxes[item].x is not None:
        x = boxes[item].x
    else:
        x = 1
    if boxes[item].y is not None:
        y = boxes[item].y
    else:
        y = 1
    if boxes[item].z is not None:
        z = boxes[item].z
    else:
        z = 1
    return (-y, x, z, item)

def print_current(s, indent, key, special_nodes):
    short_prefix = " " * indent
    prefix = " " * (indent + 2)
    my_modelbox = None
    my_box = boxes[key]
    if my_box.direct_modelbox is not None:
        my_modelbox = dict((k,v) for (k,v) in modelbox.iteritems() if k == my_box.direct_modelbox)
        my_modelbox_data = my_modelbox.values()[0]
    elif my_box.hardware is not None:
        my_modelhw = dict((k,v) for (k,v) in modelhardware.iteritems() if k == hardware[key].modelhardware)
        my_modelhw_obj = my_modelhw[my_modelhw.keys()[0]]
        my_modelbox = dict((k,v) for (k,v) in modelbox.iteritems() if k == my_modelhw_obj.modelbox)
        if not len(my_modelbox):
            my_modelbox = None
        else:
            my_modelbox_data = my_modelbox.values()[0]

    all_children = sorted(res[key], key=position_sorter)

    if key in special_nodes:
        s.write(special_nodes[key])
        for x in all_children:
            print_current(s, indent + 2, x, special_nodes)
        s.write("}\n")
        return

    buf = []
    buf.append(short_prefix + "DeskaDividedBox {")
    if len(all_children):
        buf.append(prefix + '// %s' % key)
    else:
        buf.append(prefix + 'name: "%s"' % key)

    if my_modelbox is not None:
        #buf.append("// %s %s %s" % (my_modelbox.keys()[0], repr(my_modelbox_data), repr(my_box)))
        if my_modelbox_data.internal_height is not None:
            buf.append(prefix + 'innerHeight: %s' % my_modelbox_data.internal_height)
        if my_modelbox_data.internal_width is not None:
            buf.append(prefix + 'innerWidth: %s' % my_modelbox_data.internal_width)
        if my_box.x is not None:
            buf.append(prefix + 'rackX: %d' % (int(my_box.x) - 1))
        if my_box.y is not None:
            buf.append(prefix + 'rackY: %d' % (int(my_box.y) - 1))
        if my_modelbox_data.width is not None:
            buf.append(prefix + 'consumesBaysX: %s' % my_modelbox_data.width)
        if my_modelbox_data.height is not None:
            buf.append(prefix + 'consumesBaysY: %s' % my_modelbox_data.height)

    else:
        buf.append(prefix + "// no modelbox\n")

    buf.append("")
    s.write("\n".join(buf))
    for x in all_children:
        print_current(s, indent + 2, x, special_nodes)
    s.write(short_prefix + "}\n")

special_node_rules = {
    "serverovna": """
Rectangle {
id: serverovna
//color: "transparent"
width: 1200
height: 700
""",
    "L01": """
    DeskaDividedBox {
        id: rack_L01
        width: parent.width / 8
        height: parent.height - 40
        color: "#ffdddd"

        innerWidth: 1
        innerHeight: 42

        Text {
            text: "L01"
            anchors {
                top: parent.bottom
                horizontalCenter: parent.horizontalCenter
            }
        }
""",
    "L10": """
    DeskaDividedBox {
        id: rack_L10
        width: parent.width / 8
        height: parent.height - 40
        anchors.left: rack_L01.right

        innerWidth: 2
        innerHeight: 42

        Text {
            text: "L10"
            anchors {
                top: parent.bottom
                horizontalCenter: parent.horizontalCenter
            }
        }
""",
    "L11": """
    DeskaDividedBox {
        id: rack_L11
        width: parent.width / 8
        height: parent.height - 40
        anchors.left: rack_L10.right

        innerWidth: 2
        innerHeight: 42

        Text {
            text: "L11"
            anchors {
                top: parent.bottom
                horizontalCenter: parent.horizontalCenter
            }
        }
""",

}

f = file("boxes", "wb")
f.write("import QtQuick 1.0\n\n")
print_current(f, 0, "serverovna", special_node_rules)

t3 = time.time()

file("__timing-stats", "wb").write(
    "boxes: total %s, main query %s, loop %s\n" % (t3 - t1, t2 - t1, t3 - t2))
